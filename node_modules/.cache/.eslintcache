[{"D:\\Garbage\\Google-map api\\src\\index.js":"1","D:\\Garbage\\Google-map api\\src\\App.js":"2"},{"size":309,"mtime":1659673942475,"results":"3","hashOfConfig":"4"},{"size":4881,"mtime":1659966785389,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"9"},"42bt69",{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},"D:\\Garbage\\Google-map api\\src\\index.js",[],[],[],"D:\\Garbage\\Google-map api\\src\\App.js",["14","15","16","17","18"],["19","20"],"import {\n  Button,\n  SkeletonText,\n \n} from '@chakra-ui/react'\nimport './App.css'\nimport marker from \"./Image/marker.png\";\nimport logo from \"./Image/logo.png\";\nimport {\n  useJsApiLoader,\n  GoogleMap,\n  Marker,\n  Autocomplete,\n  DirectionsRenderer,\n} from '@react-google-maps/api'\nimport { useRef, useState } from 'react'\n\nconst center = { lat: 48.8584, lng: 2.2945 }\n\nfunction App() {\n  const { isLoaded } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries: ['places'],\n  })\n\n  const [map, setMap] = useState(/** @type google.maps.Map */ (null))\n  const [directionsResponse, setDirectionsResponse] = useState(null)\n  const [distance, setDistance] = useState('')\n  const [duration, setDuration] = useState('')\n\n  /** @type React.MutableRefObject<HTMLInputElement> */\n  const originRef = useRef()\n  /** @type React.MutableRefObject<HTMLInputElement> */\n  const destiantionRef = useRef()\n\n  if (!isLoaded) {\n    return <SkeletonText />\n  }\n\n  async function calculateRoute() {\n    if (originRef.current.value === '' || destiantionRef.current.value === '') {\n      return\n    }\n    // eslint-disable-next-line no-undef\n    const directionsService = new google.maps.DirectionsService()\n    const results = await directionsService.route({\n      origin: originRef.current.value,\n      destination: destiantionRef.current.value,\n      // eslint-disable-next-line no-undef\n      travelMode: google.maps.TravelMode.DRIVING,\n    })\n    setDirectionsResponse(results)\n    setDistance(results.routes[0].legs[0].distance.text)\n    setDuration(results.routes[0].legs[0].duration.text)\n  }\n\n  \n\n  return (\n     <div className='App'>\n\n      <div className='Navbar'>\n      <img src={logo} alt=\"Logo\" className=\"logo\" />\n      </div>\n\n      <div className='Heading'>\n      Let's calculate <span className=\"bold\">distance</span> from Google\n          maps\n      </div>\n\n      <div className='main_body'>\n        <div className='main_container'>\n\n        <div className='body_left'>\n          <div className='flex-box'>\n          <div className='input_field'>\n            <h1>Origin</h1>\n           <div className='input_box'>\n           \n           <img className=\"marker\" src={marker} alt=\"marker\" />\n           \n            <Autocomplete>\n              <input type='text' placeholder='Origin' ref={originRef} className='input'/>\n            </Autocomplete>\n            \n            </div>\n\n            <h1>Destination</h1>\n            <div className='input_box'>\n            <img className=\"marker\" src={marker} alt=\"marker\" />\n            <Autocomplete>\n              <input\n                type='text'\n                placeholder='Destination'\n                ref={destiantionRef}\n                className='input'\n              />\n              </Autocomplete>\n          </div>\n          </div>\n          <div className='button_field'>\n        <div className='cal_button'>\n            <button className='button1'  type='submit' onClick={calculateRoute}>\n              Calculate\n            </button>\n             </div>\n          </div>\n          </div>\n         <div className='bottom_card'>\n          <div className='distance_cal'>\n             <div className='cal1'>Distance:</div>\n             <div className='cal2'>{!(distance=='') ? <p>{distance}</p>:<p>0 km</p>}</div>\n           </div>\n           {!(distance=='') ? \n              <h4 className=\"output-text\">\n                The distance between <span className=\"bold\">{originRef.current.value}</span> and{\" \"}\n                <span className=\"bold\">{destiantionRef.current.value}</span> is{\" \"}\n                <span className=\"bold\">{distance}</span>.\n              </h4>\n            :\n            <h4 className=\"output-text\">\n                The distance between <span className=\"bold\">Origin</span> and{\" \"}\n                <span className=\"bold\">Destination</span> is{\" \"}\n                <span className=\"bold\">0 km</span>.\n              </h4>}\n          </div>\n\n        \n        {/* <div className='button_field'>\n        <div className='cal_button'>\n            <button className='button1'  type='submit' onClick={calculateRoute}>\n              Calculate\n            </button>\n             </div>\n          </div> */}\n        </div>\n\n        <div className='body_right'>\n        <GoogleMap\n          center={center}\n          zoom={15}\n          mapContainerStyle={{ width: '100%', height: '100%' }}\n          options={{\n            zoomControl: false,\n            streetViewControl: false,\n            mapTypeControl: false,\n            fullscreenControl: false,\n          }}\n          onLoad={map => setMap(map)}\n        >\n          <Marker position={center} />\n          {directionsResponse && (\n            <DirectionsRenderer directions={directionsResponse} />\n          )}\n        </GoogleMap>\n        </div>\n        </div>\n        </div>\n    </div>\n  )\n}\n\nexport default App\n",{"ruleId":"21","severity":1,"message":"22","line":2,"column":3,"nodeType":"23","messageId":"24","endLine":2,"endColumn":9},{"ruleId":"21","severity":1,"message":"25","line":26,"column":10,"nodeType":"23","messageId":"24","endLine":26,"endColumn":13},{"ruleId":"21","severity":1,"message":"26","line":29,"column":10,"nodeType":"23","messageId":"24","endLine":29,"endColumn":18},{"ruleId":"27","severity":1,"message":"28","line":112,"column":47,"nodeType":"29","messageId":"30","endLine":112,"endColumn":49},{"ruleId":"27","severity":1,"message":"28","line":114,"column":23,"nodeType":"29","messageId":"30","endLine":114,"endColumn":25},{"ruleId":"31","severity":2,"message":"32","line":45,"column":35,"nodeType":"23","messageId":"33","endLine":45,"endColumn":41,"suppressions":"34"},{"ruleId":"31","severity":2,"message":"32","line":50,"column":19,"nodeType":"23","messageId":"33","endLine":50,"endColumn":25,"suppressions":"35"},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'map' is assigned a value but never used.","'duration' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-undef","'google' is not defined.","undef",["36"],["37"],{"kind":"38","justification":"39"},{"kind":"38","justification":"39"},"directive",""]